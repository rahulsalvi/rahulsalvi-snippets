{
    "system include": {
        "prefix": "incs",
        "body": [
            "#include <$0>"
        ],
        "description": "system include"
    },
    "local include": {
        "prefix": "incl",
        "body": [
            "#include \"$0\""
        ],
        "description": "local include"
    },
    "preprocessor define": {
        "prefix": "def",
        "body": [
            "#define $0"
        ],
        "description": "preprocessor define"
    },
    "ifdef statement": {
        "prefix": "ifdef",
        "body": [
            "#ifdef $1",
            "$0",
            "#endif"
        ],
        "description": "ifdef statement"
    },
    "header guard": {
        "prefix": "guard",
        "body": [
            "#ifndef ${1:${TM_FILENAME/[\\.]/_/g}}",
            "#define $1",
            "$0",
            "#endif // $1"
        ],
        "description": "header guard"
    },
    "if statement": {
        "prefix": "if",
        "body": [
            "if (${1:condition}) {",
            "    $0",
            "}"
        ],
        "description": "if statement"
    },
    "else statement": {
        "prefix": "else",
        "body": [
            "else {",
            "    $0",
            "}"
        ],
        "description": "else statement"
    },
    "else if statement": {
        "prefix": "elif",
        "body": [
            "else if (${1:condition}) {",
            "    $0",
            "}"
        ],
        "description": "else if statement"
    },
    "ternary if": {
        "prefix": "tif",
        "body": [
            "(${1:condition}) ? (${2:true}) : (${3:false});"
        ],
        "description": "ternary if"
    },
    "switch statement": {
        "prefix": "switch",
        "body": [
            "switch (${1:variable}) {",
            "    case ${2:0}:",
            "        $3",
            "        ${4:break;}",
            "    $0",
            "}"
        ],
        "description": "switch statement"
    },
    "case inside switch": {
        "prefix": "case",
        "body": [
            "case ${1:0}:",
            "    $2",
            "    ${3:break;}",
            "$0"
        ],
        "description": "case inside switch"
    },
    "default inside switch": {
        "prefix": "default",
        "body": [
            "default:",
            "    $1",
            "    ${2:break;}"
        ],
        "description": "default inside switch"
    },
    "for statement": {
        "prefix": "for",
        "body": [
            "for (int ${1:i} = ${2:start}; $1 < ${3:end}; $1++) {",
            "    $0",
            "}"
        ],
        "description": "for statement"
    },
    "while statement": {
        "prefix": "while",
        "body": [
            "while (${1:condition}) {",
            "    $0",
            "}"
        ],
        "description": "while statement"
    },
    "do while statement": {
        "prefix": "do",
        "body": [
            "do {",
            "    $0",
            "} while (${1:condition})"
        ],
        "description": "do while statement"
    },
    "function": {
        "prefix": "function",
        "body": [
            "${1:void} ${2:name}(${3: parameters})$0"
        ],
        "description": "function"
    },
    "main()": {
        "prefix": "main",
        "body": [
            "int main() {",
            "    $0",
            "}"
        ],
        "description": "main()"
    },
    "main(argc, argv)": {
        "prefix": "maina",
        "body": [
            "int main(int argc, char** argv) {",
            "    $0",
            "}"
        ],
        "description": "main(argc, argv)"
    },
    "typedef": {
        "prefix": "typedef",
        "body": [
            "typedef ${1:original} ${2:new};"
        ],
        "description": "typedef"
    },
    "struct": {
        "prefix": "struct",
        "body": [
            "struct ${1:name} {",
            "    $0",
            "};"
        ],
        "description": "struct"
    },
    "enum": {
        "prefix": "enum",
        "body": [
            "enum ${1:name} {",
            "    $0",
            "}"
        ],
        "description": "enum"
    }
}
